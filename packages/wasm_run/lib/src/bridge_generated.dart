// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:collection/collection.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

part 'bridge_generated.freezed.dart';

abstract class WasmRunDart {
  WasmRunModuleId moduleBuilder(
      {required CompiledModule module,
      int? numThreads,
      WasiConfigNative? wasiConfig,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kModuleBuilderConstMeta;

  Future<Uint8List> parseWatFormat({required String wat, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseWatFormatConstMeta;

  Future<CompiledModule> compileWasm(
      {required Uint8List moduleWasm,
      required ModuleConfig config,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCompileWasmConstMeta;

  CompiledModule compileWasmSync(
      {required Uint8List moduleWasm,
      required ModuleConfig config,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCompileWasmSyncConstMeta;

  WasmFeatures wasmFeaturesForConfig(
      {required ModuleConfig config, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWasmFeaturesForConfigConstMeta;

  WasmRuntimeFeatures wasmRuntimeFeatures({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWasmRuntimeFeaturesConstMeta;

  List<ModuleExportValue> exportsMethodWasmRunInstanceId(
      {required WasmRunInstanceId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExportsMethodWasmRunInstanceIdConstMeta;

  WasmRunInstanceId instantiateSyncMethodWasmRunModuleId(
      {required WasmRunModuleId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kInstantiateSyncMethodWasmRunModuleIdConstMeta;

  Future<WasmRunInstanceId> instantiateMethodWasmRunModuleId(
      {required WasmRunModuleId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInstantiateMethodWasmRunModuleIdConstMeta;

  void linkImportsMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required List<ModuleImport> imports,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLinkImportsMethodWasmRunModuleIdConstMeta;

  Stream<Uint8List> stdioStreamMethodWasmRunModuleId(
      {required WasmRunModuleId that, required StdIOKind kind, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStdioStreamMethodWasmRunModuleIdConstMeta;

  Future<void> disposeMethodWasmRunModuleId(
      {required WasmRunModuleId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisposeMethodWasmRunModuleIdConstMeta;

  List<WasmVal> callFunctionHandleSyncMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required WFunc func,
      required List<WasmVal> args,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionHandleSyncMethodWasmRunModuleIdConstMeta;

  Future<List<WasmVal>> callFunctionHandleMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required WFunc func,
      required List<WasmVal> args,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionHandleMethodWasmRunModuleIdConstMeta;

  Stream<ParallelExec> callFunctionHandleParallelMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required String funcName,
      required List<WasmVal> args,
      required int numTasks,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionHandleParallelMethodWasmRunModuleIdConstMeta;

  void workerExecutionMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required int workerIndex,
      required List<WasmVal> results,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kWorkerExecutionMethodWasmRunModuleIdConstMeta;

  FuncTy getFunctionTypeMethodWasmRunModuleId(
      {required WasmRunModuleId that, required WFunc func, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetFunctionTypeMethodWasmRunModuleIdConstMeta;

  WFunc createFunctionMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required int functionPointer,
      required int functionId,
      required List<ValueTy> paramTypes,
      required List<ValueTy> resultTypes,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCreateFunctionMethodWasmRunModuleIdConstMeta;

  Memory createMemoryMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required MemoryTy memoryType,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCreateMemoryMethodWasmRunModuleIdConstMeta;

  Global createGlobalMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required WasmVal value,
      required bool mutable,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCreateGlobalMethodWasmRunModuleIdConstMeta;

  Table createTableMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required WasmVal value,
      required TableArgs tableType,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateTableMethodWasmRunModuleIdConstMeta;

  GlobalTy getGlobalTypeMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Global global, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetGlobalTypeMethodWasmRunModuleIdConstMeta;

  WasmVal getGlobalValueMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Global global, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetGlobalValueMethodWasmRunModuleIdConstMeta;

  void setGlobalValueMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Global global,
      required WasmVal value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSetGlobalValueMethodWasmRunModuleIdConstMeta;

  MemoryTy getMemoryTypeMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Memory memory, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryTypeMethodWasmRunModuleIdConstMeta;

  Uint8List getMemoryDataMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Memory memory, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryDataMethodWasmRunModuleIdConstMeta;

  int getMemoryDataPointerMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Memory memory, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryDataPointerMethodWasmRunModuleIdConstMeta;

  PointerAndLength getMemoryDataPointerAndLengthMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Memory memory, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryDataPointerAndLengthMethodWasmRunModuleIdConstMeta;

  Uint8List readMemoryMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Memory memory,
      required int offset,
      required int bytes,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReadMemoryMethodWasmRunModuleIdConstMeta;

  int getMemoryPagesMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Memory memory, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryPagesMethodWasmRunModuleIdConstMeta;

  void writeMemoryMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Memory memory,
      required int offset,
      required Uint8List buffer,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWriteMemoryMethodWasmRunModuleIdConstMeta;

  int growMemoryMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Memory memory,
      required int pages,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGrowMemoryMethodWasmRunModuleIdConstMeta;

  int getTableSizeMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Table table, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetTableSizeMethodWasmRunModuleIdConstMeta;

  TableTy getTableTypeMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Table table, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetTableTypeMethodWasmRunModuleIdConstMeta;

  int growTableMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Table table,
      required int delta,
      required WasmVal value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGrowTableMethodWasmRunModuleIdConstMeta;

  WasmVal? getTableMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Table table,
      required int index,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTableMethodWasmRunModuleIdConstMeta;

  void setTableMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Table table,
      required int index,
      required WasmVal value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetTableMethodWasmRunModuleIdConstMeta;

  void fillTableMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Table table,
      required int index,
      required WasmVal value,
      required int len,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFillTableMethodWasmRunModuleIdConstMeta;

  void addFuelMethodWasmRunModuleId(
      {required WasmRunModuleId that, required int delta, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddFuelMethodWasmRunModuleIdConstMeta;

  int? fuelConsumedMethodWasmRunModuleId(
      {required WasmRunModuleId that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFuelConsumedMethodWasmRunModuleIdConstMeta;

  int consumeFuelMethodWasmRunModuleId(
      {required WasmRunModuleId that, required int delta, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConsumeFuelMethodWasmRunModuleIdConstMeta;

  WasmRunSharedMemory createSharedMemoryMethodCompiledModule(
      {required CompiledModule that,
      required MemoryTy memoryType,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kCreateSharedMemoryMethodCompiledModuleConstMeta;

  List<ModuleImportDesc> getModuleImportsMethodCompiledModule(
      {required CompiledModule that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetModuleImportsMethodCompiledModuleConstMeta;

  List<ModuleExportDesc> getModuleExportsMethodCompiledModule(
      {required CompiledModule that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetModuleExportsMethodCompiledModuleConstMeta;

  MemoryTy tyMethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTyMethodWasmRunSharedMemoryConstMeta;

  int sizeMethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSizeMethodWasmRunSharedMemoryConstMeta;

  int dataSizeMethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDataSizeMethodWasmRunSharedMemoryConstMeta;

  int dataPointerMethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kDataPointerMethodWasmRunSharedMemoryConstMeta;

  int growMethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that, required int delta, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGrowMethodWasmRunSharedMemoryConstMeta;

  Future<Atomics> atomicsMethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAtomicsMethodWasmRunSharedMemoryConstMeta;

  int atomicNotifyMethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that,
      required int addr,
      required int count,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kAtomicNotifyMethodWasmRunSharedMemoryConstMeta;

  /// Equivalent of the WebAssembly `memory.atomic.wait32` instruction for
  /// this shared memory.
  ///
  /// This method allows embedders to block the current thread until notified
  /// via the `memory.atomic.notify` instruction or the
  /// [`SharedMemory::atomic_notify`] method, enabling synchronization with
  /// the wasm guest as desired.
  ///
  /// The `expected` argument is the expected 32-bit value to be stored at
  /// the byte address `addr` specified. The `addr` specified is an index
  /// into this linear memory.
  ///
  /// The optional `timeout` argument is the point in time after which the
  /// calling thread is guaranteed to be woken up. Blocking will not occur
  /// past this point.
  ///
  /// This function returns one of three possible values:
  ///
  /// * `WaitResult::Ok` - this function, loaded the value at `addr`, found
  ///   it was equal to `expected`, and then blocked (all as one atomic
  ///   operation). The thread was then awoken with a `memory.atomic.notify`
  ///   instruction or the [`SharedMemory::atomic_notify`] method.
  /// * `WaitResult::Mismatch` - the value at `addr` was loaded but was not
  ///   equal to `expected` so the thread did not block and immediately
  ///   returned.
  /// * `WaitResult::TimedOut` - all the steps of `Ok` happened, except this
  ///   thread was woken up due to a timeout.
  ///
  /// This function will not return due to spurious wakeups.
  ///
  /// # Errors
  ///
  /// This function will return an error if `addr` is not within bounds or
  /// not aligned to a 4-byte boundary.
  SharedMemoryWaitResult atomicWait32MethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that,
      required int addr,
      required int expected,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kAtomicWait32MethodWasmRunSharedMemoryConstMeta;

  /// Equivalent of the WebAssembly `memory.atomic.wait64` instruction for
  /// this shared memory.
  ///
  /// For more information see [`SharedMemory::atomic_wait32`].
  ///
  /// # Errors
  ///
  /// Returns the same error as [`SharedMemory::atomic_wait32`] except that
  /// the specified address must be 8-byte aligned instead of 4-byte aligned.
  SharedMemoryWaitResult atomicWait64MethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that,
      required int addr,
      required int expected,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kAtomicWait64MethodWasmRunSharedMemoryConstMeta;

  /// Adds the provided value to the existing value at the specified index of the array. Returns the old value at that index.
  Future<int> addMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int val,
      required AtomicOrdering order,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddMethodAtomicsConstMeta;

  /// Returns the value at the specified index of the array.
  Future<int> loadMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required AtomicOrdering order,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoadMethodAtomicsConstMeta;

  /// Stores a value at the specified index of the array. Returns the value.
  Future<void> storeMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int val,
      required AtomicOrdering order,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStoreMethodAtomicsConstMeta;

  /// Stores a value at the specified index of the array. Returns the old value.
  Future<int> swapMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int val,
      required AtomicOrdering order,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSwapMethodAtomicsConstMeta;

  /// Stores a value at the specified index of the array, if it equals a value. Returns the old value.
  Future<CompareExchangeResult> compareExchangeMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int current,
      required int newValue,
      required AtomicOrdering success,
      required AtomicOrdering failure,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCompareExchangeMethodAtomicsConstMeta;

  /// Subtracts a value at the specified index of the array. Returns the old value at that index.
  Future<int> subMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int val,
      required AtomicOrdering order,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSubMethodAtomicsConstMeta;

  /// Computes a bitwise AND on the value at the specified index of the array with the provided value. Returns the old value at that index.
  Future<int> andMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int val,
      required AtomicOrdering order,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAndMethodAtomicsConstMeta;

  /// Computes a bitwise OR on the value at the specified index of the array with the provided value. Returns the old value at that index.
  Future<int> orMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int val,
      required AtomicOrdering order,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOrMethodAtomicsConstMeta;

  /// Computes a bitwise XOR on the value at the specified index of the array with the provided value. Returns the old value at that index.
  Future<int> xorMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int val,
      required AtomicOrdering order,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kXorMethodAtomicsConstMeta;

  DropFnType get dropOpaqueArcRwLockSharedMemory;
  ShareFnType get shareOpaqueArcRwLockSharedMemory;
  OpaqueTypeFinalizer get ArcRwLockSharedMemoryFinalizer;

  DropFnType get dropOpaqueArcStdSyncMutexModule;
  ShareFnType get shareOpaqueArcStdSyncMutexModule;
  OpaqueTypeFinalizer get ArcStdSyncMutexModuleFinalizer;

  DropFnType get dropOpaqueCallStack;
  ShareFnType get shareOpaqueCallStack;
  OpaqueTypeFinalizer get CallStackFinalizer;

  DropFnType get dropOpaqueGlobal;
  ShareFnType get shareOpaqueGlobal;
  OpaqueTypeFinalizer get GlobalFinalizer;

  DropFnType get dropOpaqueMemory;
  ShareFnType get shareOpaqueMemory;
  OpaqueTypeFinalizer get MemoryFinalizer;

  DropFnType get dropOpaqueTable;
  ShareFnType get shareOpaqueTable;
  OpaqueTypeFinalizer get TableFinalizer;

  DropFnType get dropOpaqueWFunc;
  ShareFnType get shareOpaqueWFunc;
  OpaqueTypeFinalizer get WFuncFinalizer;
}

@sealed
class ArcRwLockSharedMemory extends FrbOpaque {
  final WasmRunDart bridge;
  ArcRwLockSharedMemory.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcRwLockSharedMemory;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcRwLockSharedMemory;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcRwLockSharedMemoryFinalizer;
}

@sealed
class ArcStdSyncMutexModule extends FrbOpaque {
  final WasmRunDart bridge;
  ArcStdSyncMutexModule.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueArcStdSyncMutexModule;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueArcStdSyncMutexModule;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.ArcStdSyncMutexModuleFinalizer;
}

@sealed
class CallStack extends FrbOpaque {
  final WasmRunDart bridge;
  CallStack.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueCallStack;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueCallStack;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.CallStackFinalizer;
}

@sealed
class Global extends FrbOpaque {
  final WasmRunDart bridge;
  Global.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueGlobal;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueGlobal;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.GlobalFinalizer;
}

@sealed
class Memory extends FrbOpaque {
  final WasmRunDart bridge;
  Memory.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueMemory;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueMemory;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.MemoryFinalizer;
}

@sealed
class Table extends FrbOpaque {
  final WasmRunDart bridge;
  Table.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueTable;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueTable;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.TableFinalizer;
}

@sealed
class WFunc extends FrbOpaque {
  final WasmRunDart bridge;
  WFunc.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueWFunc;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueWFunc;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.WFuncFinalizer;
}

enum AtomicKind {
  I8,
  I16,
  I32,
  I64,
  U8,
  U16,
  U32,
  U64,
}

enum AtomicOrdering {
  Relaxed,
  Release,
  Acquire,
  AcqRel,
  SeqCst,
}

class Atomics {
  final WasmRunDart bridge;
  final int field0;

  const Atomics({
    required this.bridge,
    required this.field0,
  });

  /// Adds the provided value to the existing value at the specified index of the array. Returns the old value at that index.
  Future<int> add(
          {required int offset,
          required AtomicKind kind,
          required int val,
          required AtomicOrdering order,
          dynamic hint}) =>
      bridge.addMethodAtomics(
        that: this,
        offset: offset,
        kind: kind,
        val: val,
        order: order,
      );

  /// Returns the value at the specified index of the array.
  Future<int> load(
          {required int offset,
          required AtomicKind kind,
          required AtomicOrdering order,
          dynamic hint}) =>
      bridge.loadMethodAtomics(
        that: this,
        offset: offset,
        kind: kind,
        order: order,
      );

  /// Stores a value at the specified index of the array. Returns the value.
  Future<void> store(
          {required int offset,
          required AtomicKind kind,
          required int val,
          required AtomicOrdering order,
          dynamic hint}) =>
      bridge.storeMethodAtomics(
        that: this,
        offset: offset,
        kind: kind,
        val: val,
        order: order,
      );

  /// Stores a value at the specified index of the array. Returns the old value.
  Future<int> swap(
          {required int offset,
          required AtomicKind kind,
          required int val,
          required AtomicOrdering order,
          dynamic hint}) =>
      bridge.swapMethodAtomics(
        that: this,
        offset: offset,
        kind: kind,
        val: val,
        order: order,
      );

  /// Stores a value at the specified index of the array, if it equals a value. Returns the old value.
  Future<CompareExchangeResult> compareExchange(
          {required int offset,
          required AtomicKind kind,
          required int current,
          required int newValue,
          required AtomicOrdering success,
          required AtomicOrdering failure,
          dynamic hint}) =>
      bridge.compareExchangeMethodAtomics(
        that: this,
        offset: offset,
        kind: kind,
        current: current,
        newValue: newValue,
        success: success,
        failure: failure,
      );

  /// Subtracts a value at the specified index of the array. Returns the old value at that index.
  Future<int> sub(
          {required int offset,
          required AtomicKind kind,
          required int val,
          required AtomicOrdering order,
          dynamic hint}) =>
      bridge.subMethodAtomics(
        that: this,
        offset: offset,
        kind: kind,
        val: val,
        order: order,
      );

  /// Computes a bitwise AND on the value at the specified index of the array with the provided value. Returns the old value at that index.
  Future<int> and(
          {required int offset,
          required AtomicKind kind,
          required int val,
          required AtomicOrdering order,
          dynamic hint}) =>
      bridge.andMethodAtomics(
        that: this,
        offset: offset,
        kind: kind,
        val: val,
        order: order,
      );

  /// Computes a bitwise OR on the value at the specified index of the array with the provided value. Returns the old value at that index.
  Future<int> or(
          {required int offset,
          required AtomicKind kind,
          required int val,
          required AtomicOrdering order,
          dynamic hint}) =>
      bridge.orMethodAtomics(
        that: this,
        offset: offset,
        kind: kind,
        val: val,
        order: order,
      );

  /// Computes a bitwise XOR on the value at the specified index of the array with the provided value. Returns the old value at that index.
  Future<int> xor(
          {required int offset,
          required AtomicKind kind,
          required int val,
          required AtomicOrdering order,
          dynamic hint}) =>
      bridge.xorMethodAtomics(
        that: this,
        offset: offset,
        kind: kind,
        val: val,
        order: order,
      );
}

class CompareExchangeResult {
  final bool success;
  final int value;

  const CompareExchangeResult({
    required this.success,
    required this.value,
  });
}

class CompiledModule {
  final WasmRunDart bridge;
  final ArcStdSyncMutexModule field0;

  const CompiledModule({
    required this.bridge,
    required this.field0,
  });

  WasmRunSharedMemory createSharedMemory(
          {required MemoryTy memoryType, dynamic hint}) =>
      bridge.createSharedMemoryMethodCompiledModule(
        that: this,
        memoryType: memoryType,
      );

  List<ModuleImportDesc> getModuleImports({dynamic hint}) =>
      bridge.getModuleImportsMethodCompiledModule(
        that: this,
      );

  List<ModuleExportDesc> getModuleExports({dynamic hint}) =>
      bridge.getModuleExportsMethodCompiledModule(
        that: this,
      );
}

class EnvVariable {
  /// The name of the environment variable
  final String name;

  /// The value of the environment variable
  final String value;

  const EnvVariable({
    required this.name,
    required this.value,
  });
}

@freezed
class ExternalType with _$ExternalType {
  /// A [FuncTy].
  const factory ExternalType.func(
    FuncTy field0,
  ) = ExternalType_Func;

  /// A [GlobalTy].
  const factory ExternalType.global(
    GlobalTy field0,
  ) = ExternalType_Global;

  /// A [TableTy].
  const factory ExternalType.table(
    TableTy field0,
  ) = ExternalType_Table;

  /// A [MemoryTy].
  const factory ExternalType.memory(
    MemoryTy field0,
  ) = ExternalType_Memory;
}

@freezed
class ExternalValue with _$ExternalValue {
  const factory ExternalValue.func(
    WFunc field0,
  ) = ExternalValue_Func;
  const factory ExternalValue.global(
    Global field0,
  ) = ExternalValue_Global;
  const factory ExternalValue.table(
    Table field0,
  ) = ExternalValue_Table;
  const factory ExternalValue.memory(
    Memory field0,
  ) = ExternalValue_Memory;
  const factory ExternalValue.sharedMemory(
    WasmRunSharedMemory field0,
  ) = ExternalValue_SharedMemory;
}

class FuncTy {
  /// The number of function parameters.
  final List<ValueTy> parameters;

  /// The ordered and merged parameter and result types of the function type.]
  final List<ValueTy> results;

  const FuncTy({
    required this.parameters,
    required this.results,
  });
}

class FunctionCall {
  final List<WasmVal> args;
  final int functionId;
  final int functionPointer;
  final int numResults;
  final int workerIndex;

  const FunctionCall({
    required this.args,
    required this.functionId,
    required this.functionPointer,
    required this.numResults,
    required this.workerIndex,
  });
}

class GlobalTy {
  /// The value type of the global variable.
  final ValueTy value;

  /// The mutability of the global variable.
  final bool mutable;

  const GlobalTy({
    required this.value,
    required this.mutable,
  });
}

class MemoryTy {
  /// Whether or not this memory could be shared between multiple processes.
  final bool shared;

  /// The number of initial pages associated with the memory.
  final int minimum;

  /// The maximum number of pages this memory can have.
  final int? maximum;

  const MemoryTy({
    required this.shared,
    required this.minimum,
    this.maximum,
  });
}

class ModuleConfig {
  /// Is `true` if the [`multi-value`] Wasm proposal is enabled.
  final bool? multiValue;

  /// Is `true` if the [`bulk-memory`] Wasm proposal is enabled.
  final bool? bulkMemory;

  /// Is `true` if the [`reference-types`] Wasm proposal is enabled.
  final bool? referenceTypes;

  /// Is `true` if executions shall consume fuel.
  final bool? consumeFuel;

  /// Configuration specific to the wasmi runtime
  final ModuleConfigWasmi? wasmi;

  /// Configuration specific to the wasmtime runtime
  final ModuleConfigWasmtime? wasmtime;

  const ModuleConfig({
    this.multiValue,
    this.bulkMemory,
    this.referenceTypes,
    this.consumeFuel,
    this.wasmi,
    this.wasmtime,
  });
}

class ModuleConfigWasmi {
  /// The limits set on the value stack and call stack.
  final WasiStackLimits? stackLimits;

  /// The amount of Wasm stacks to keep in cache at most.
  final int? cachedStacks;

  /// Is `true` if the `mutable-global` Wasm proposal is enabled.
  final bool? mutableGlobal;

  /// Is `true` if the `sign-extension` Wasm proposal is enabled.
  final bool? signExtension;

  /// Is `true` if the `saturating-float-to-int` Wasm proposal is enabled.
  final bool? saturatingFloatToInt;

  /// Is `true` if the [`tail-call`] Wasm proposal is enabled.
  final bool? tailCall;

  /// Is `true` if the [`extended-const`] Wasm proposal is enabled.
  final bool? extendedConst;

  /// Is `true` if Wasm instructions on `f32` and `f64` types are allowed.
  final bool? floats;

  const ModuleConfigWasmi({
    this.stackLimits,
    this.cachedStacks,
    this.mutableGlobal,
    this.signExtension,
    this.saturatingFloatToInt,
    this.tailCall,
    this.extendedConst,
    this.floats,
  });
}

class ModuleConfigWasmtime {
  /// Configures whether DWARF debug information will be emitted during
  /// compilation.
  final bool? debugInfo;
  final bool? wasmBacktrace;
  final bool? nativeUnwindInfo;
  final int? maxWasmStack;

  /// Whether or not to enable the `threads` WebAssembly feature.
  /// This includes atomics and shared memory as well.
  /// This is not enabled by default.
  final bool? wasmThreads;

  /// Whether or not to enable the `simd` WebAssembly feature.
  final bool? wasmSimd;

  /// Whether or not to enable the `relaxed-simd` WebAssembly feature.
  /// This is not enabled by default.
  final bool? wasmRelaxedSimd;

  /// Whether [wasm_relaxed_simd] should be deterministic.
  /// This is false by default.
  final bool? relaxedSimdDeterministic;

  /// Whether or not to enable the `multi-memory` WebAssembly feature.
  /// This is not enabled by default.
  final bool? wasmMultiMemory;

  /// Whether or not to enable the `memory64` WebAssembly feature.
  /// This is not enabled by default.
  final bool? wasmMemory64;
  final int? staticMemoryMaximumSize;
  final bool? staticMemoryForced;
  final int? staticMemoryGuardSize;
  final bool? parallelCompilation;
  final bool? generateAddressMap;

  const ModuleConfigWasmtime({
    this.debugInfo,
    this.wasmBacktrace,
    this.nativeUnwindInfo,
    this.maxWasmStack,
    this.wasmThreads,
    this.wasmSimd,
    this.wasmRelaxedSimd,
    this.relaxedSimdDeterministic,
    this.wasmMultiMemory,
    this.wasmMemory64,
    this.staticMemoryMaximumSize,
    this.staticMemoryForced,
    this.staticMemoryGuardSize,
    this.parallelCompilation,
    this.generateAddressMap,
  });
}

class ModuleExportDesc {
  final String name;
  final ExternalType ty;

  const ModuleExportDesc({
    required this.name,
    required this.ty,
  });
}

class ModuleExportValue {
  final ModuleExportDesc desc;
  final ExternalValue value;

  const ModuleExportValue({
    required this.desc,
    required this.value,
  });
}

class ModuleImport {
  final String module;
  final String name;
  final ExternalValue value;

  const ModuleImport({
    required this.module,
    required this.name,
    required this.value,
  });
}

class ModuleImportDesc {
  final String module;
  final String name;
  final ExternalType ty;

  const ModuleImportDesc({
    required this.module,
    required this.name,
    required this.ty,
  });
}

@freezed
class ParallelExec with _$ParallelExec {
  const factory ParallelExec.ok(
    List<WasmVal> field0,
  ) = ParallelExec_Ok;
  const factory ParallelExec.err(
    String field0,
  ) = ParallelExec_Err;
  const factory ParallelExec.call(
    FunctionCall field0,
  ) = ParallelExec_Call;
}

class PointerAndLength {
  final int pointer;
  final int length;

  const PointerAndLength({
    required this.pointer,
    required this.length,
  });
}

/// A preopened directory that the WASM module will be able to access
class PreopenedDir {
  /// The path inside the WASM module.
  /// Should be "/" separated, if you are on windows, you will need to convert the path
  final String wasmGuestPath;

  /// The path on the host that the WASM module will be able to access
  /// and corresponds to the [wasm_guest_path]
  final String hostPath;

  const PreopenedDir({
    required this.wasmGuestPath,
    required this.hostPath,
  });
}

/// Result of [SharedMemory.atomicWait32] and [SharedMemory.atomicWait64]
enum SharedMemoryWaitResult {
  /// Indicates that a `wait` completed by being awoken by a different thread.
  /// This means the thread went to sleep and didn't time out.
  ok,

  /// Indicates that `wait` did not complete and instead returned due to the
  /// value in memory not matching the expected value.
  mismatch,

  /// Indicates that `wait` completed with a timeout, meaning that the
  /// original value matched as expected but nothing ever called `notify`.
  timedOut,
}

enum StdIOKind {
  stdout,
  stderr,
}

class TableArgs {
  /// The minimum number of elements the [`Table`] must have.
  final int minimum;

  /// The optional maximum number of elements the [`Table`] can have.
  ///
  /// If this is `None` then the [`Table`] is not limited in size.
  final int? maximum;

  const TableArgs({
    required this.minimum,
    this.maximum,
  });
}

class TableTy {
  /// The type of values stored in the [WasmTable].
  final ValueTy element;

  /// The minimum number of elements the [WasmTable] must have.
  final int minimum;

  /// The optional maximum number of elements the [WasmTable] can have.
  ///
  /// If this is `None` then the [WasmTable] is not limited in size.
  final int? maximum;

  const TableTy({
    required this.element,
    required this.minimum,
    this.maximum,
  });
}

class U8Array16 extends NonGrowableListView<int> {
  static const arraySize = 16;
  U8Array16(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array16.unchecked(Uint8List inner) : super(inner);
  U8Array16.init() : super(Uint8List(arraySize));
}

enum ValueTy {
  /// 32-bit signed or unsigned integer.
  i32,

  /// 64-bit signed or unsigned integer.
  i64,

  /// 32-bit IEEE 754-2008 floating point number.
  f32,

  /// 64-bit IEEE 754-2008 floating point number.
  f64,

  /// A 128 bit number.
  v128,

  /// A nullable function reference.
  funcRef,

  /// A nullable external reference.
  externRef,
}

class WasiConfigNative {
  /// Whether to capture stdout.
  /// If this is true, you can use the [WasmInstance.stdout]
  /// getter to retrieve a stream of the module's stdout.
  final bool captureStdout;

  /// Whether to capture stderr
  /// If this is true, you can use the [WasmInstance.stderr]
  /// getter to retrieve a stream of the module's stderr.
  final bool captureStderr;

  /// Whether to inherit stdin from the host process.
  final bool inheritStdin;

  /// Whether to inherit environment variables from the host process.
  final bool inheritEnv;

  /// Whether to inherit the process arguments from the host process.
  final bool inheritArgs;

  /// Custom process arguments to pass to the WASM module
  final List<String> args;

  /// Custom Environment variables to pass to the WASM module
  final List<EnvVariable> env;

  /// Custom preopened files to pass to the WASM module
  final List<String> preopenedFiles;

  /// Custom preopened directories to pass to the WASM module
  /// The module will be able to access and edit these directories
  final List<PreopenedDir> preopenedDirs;

  const WasiConfigNative({
    required this.captureStdout,
    required this.captureStderr,
    required this.inheritStdin,
    required this.inheritEnv,
    required this.inheritArgs,
    required this.args,
    required this.env,
    required this.preopenedFiles,
    required this.preopenedDirs,
  });
}

/// The configured limits of the Wasm stack.
class WasiStackLimits {
  /// The initial value stack height that the Wasm stack prepares.
  final int initialValueStackHeight;

  /// The maximum value stack height in use that the Wasm stack allows.
  final int maximumValueStackHeight;

  /// The maximum number of nested calls that the Wasm stack allows.
  final int maximumRecursionDepth;

  const WasiStackLimits({
    required this.initialValueStackHeight,
    required this.maximumValueStackHeight,
    required this.maximumRecursionDepth,
  });
}

/// https://docs.wasmtime.dev/stability-wasm-proposals-support.html
class WasmFeatures {
  /// The WebAssembly `mutable-global` proposal (enabled by default)
  final bool mutableGlobal;

  /// The WebAssembly `nontrapping-float-to-int-conversions` proposal (enabled by default)
  final bool saturatingFloatToInt;

  /// The WebAssembly `sign-extension-ops` proposal (enabled by default)
  final bool signExtension;

  /// The WebAssembly reference types proposal (enabled by default)
  final bool referenceTypes;

  /// The WebAssembly multi-value proposal (enabled by default)
  final bool multiValue;

  /// The WebAssembly bulk memory operations proposal (enabled by default)
  final bool bulkMemory;

  /// The WebAssembly SIMD proposal
  final bool simd;

  /// The WebAssembly Relaxed SIMD proposal
  final bool relaxedSimd;

  /// The WebAssembly threads proposal, shared memory and atomics
  /// https://docs.rs/wasmtime/9.0.2/wasmtime/struct.Config.html#method.wasm_threads
  final bool threads;

  /// The WebAssembly tail-call proposal
  final bool tailCall;

  /// Whether or not floating-point instructions are enabled.
  ///
  /// This is enabled by default can be used to disallow floating-point
  /// operators and types.
  ///
  /// This does not correspond to a WebAssembly proposal but is instead
  /// intended for embeddings which have stricter-than-usual requirements
  /// about execution. Floats in WebAssembly can have different NaN patterns
  /// across hosts which can lead to host-dependent execution which some
  /// runtimes may not desire.
  final bool floats;

  /// The WebAssembly multi memory proposal
  final bool multiMemory;

  /// The WebAssembly exception handling proposal
  final bool exceptions;

  /// The WebAssembly memory64 proposal
  final bool memory64;

  /// The WebAssembly extended_const proposal
  final bool extendedConst;

  /// The WebAssembly component model proposal
  final bool componentModel;

  /// The WebAssembly memory control proposal
  final bool memoryControl;

  /// The WebAssembly garbage collection (GC) proposal
  final bool garbageCollection;

  /// WebAssembly external types reflection or, for browsers,
  /// the js-types proposal (https://github.com/WebAssembly/js-types/blob/main/proposals/js-types/Overview.md)
  final bool typeReflection;

  /// The WebAssembly System Interface proposal
  final WasmWasiFeatures? wasiFeatures;

  const WasmFeatures({
    required this.mutableGlobal,
    required this.saturatingFloatToInt,
    required this.signExtension,
    required this.referenceTypes,
    required this.multiValue,
    required this.bulkMemory,
    required this.simd,
    required this.relaxedSimd,
    required this.threads,
    required this.tailCall,
    required this.floats,
    required this.multiMemory,
    required this.exceptions,
    required this.memory64,
    required this.extendedConst,
    required this.componentModel,
    required this.memoryControl,
    required this.garbageCollection,
    required this.typeReflection,
    this.wasiFeatures,
  });
}

class WasmRunInstanceId {
  final WasmRunDart bridge;
  final int field0;

  const WasmRunInstanceId({
    required this.bridge,
    required this.field0,
  });

  List<ModuleExportValue> exports({dynamic hint}) =>
      bridge.exportsMethodWasmRunInstanceId(
        that: this,
      );
}

class WasmRunModuleId {
  final WasmRunDart bridge;
  final int field0;
  final CallStack field1;

  const WasmRunModuleId({
    required this.bridge,
    required this.field0,
    required this.field1,
  });

  WasmRunInstanceId instantiateSync({dynamic hint}) =>
      bridge.instantiateSyncMethodWasmRunModuleId(
        that: this,
      );

  Future<WasmRunInstanceId> instantiate({dynamic hint}) =>
      bridge.instantiateMethodWasmRunModuleId(
        that: this,
      );

  void linkImports({required List<ModuleImport> imports, dynamic hint}) =>
      bridge.linkImportsMethodWasmRunModuleId(
        that: this,
        imports: imports,
      );

  Stream<Uint8List> stdioStream({required StdIOKind kind, dynamic hint}) =>
      bridge.stdioStreamMethodWasmRunModuleId(
        that: this,
        kind: kind,
      );

  Future<void> dispose({dynamic hint}) => bridge.disposeMethodWasmRunModuleId(
        that: this,
      );

  List<WasmVal> callFunctionHandleSync(
          {required WFunc func, required List<WasmVal> args, dynamic hint}) =>
      bridge.callFunctionHandleSyncMethodWasmRunModuleId(
        that: this,
        func: func,
        args: args,
      );

  Future<List<WasmVal>> callFunctionHandle(
          {required WFunc func, required List<WasmVal> args, dynamic hint}) =>
      bridge.callFunctionHandleMethodWasmRunModuleId(
        that: this,
        func: func,
        args: args,
      );

  Stream<ParallelExec> callFunctionHandleParallel(
          {required String funcName,
          required List<WasmVal> args,
          required int numTasks,
          dynamic hint}) =>
      bridge.callFunctionHandleParallelMethodWasmRunModuleId(
        that: this,
        funcName: funcName,
        args: args,
        numTasks: numTasks,
      );

  void workerExecution(
          {required int workerIndex,
          required List<WasmVal> results,
          dynamic hint}) =>
      bridge.workerExecutionMethodWasmRunModuleId(
        that: this,
        workerIndex: workerIndex,
        results: results,
      );

  FuncTy getFunctionType({required WFunc func, dynamic hint}) =>
      bridge.getFunctionTypeMethodWasmRunModuleId(
        that: this,
        func: func,
      );

  WFunc createFunction(
          {required int functionPointer,
          required int functionId,
          required List<ValueTy> paramTypes,
          required List<ValueTy> resultTypes,
          dynamic hint}) =>
      bridge.createFunctionMethodWasmRunModuleId(
        that: this,
        functionPointer: functionPointer,
        functionId: functionId,
        paramTypes: paramTypes,
        resultTypes: resultTypes,
      );

  Memory createMemory({required MemoryTy memoryType, dynamic hint}) =>
      bridge.createMemoryMethodWasmRunModuleId(
        that: this,
        memoryType: memoryType,
      );

  Global createGlobal(
          {required WasmVal value, required bool mutable, dynamic hint}) =>
      bridge.createGlobalMethodWasmRunModuleId(
        that: this,
        value: value,
        mutable: mutable,
      );

  Table createTable(
          {required WasmVal value,
          required TableArgs tableType,
          dynamic hint}) =>
      bridge.createTableMethodWasmRunModuleId(
        that: this,
        value: value,
        tableType: tableType,
      );

  GlobalTy getGlobalType({required Global global, dynamic hint}) =>
      bridge.getGlobalTypeMethodWasmRunModuleId(
        that: this,
        global: global,
      );

  WasmVal getGlobalValue({required Global global, dynamic hint}) =>
      bridge.getGlobalValueMethodWasmRunModuleId(
        that: this,
        global: global,
      );

  void setGlobalValue(
          {required Global global, required WasmVal value, dynamic hint}) =>
      bridge.setGlobalValueMethodWasmRunModuleId(
        that: this,
        global: global,
        value: value,
      );

  MemoryTy getMemoryType({required Memory memory, dynamic hint}) =>
      bridge.getMemoryTypeMethodWasmRunModuleId(
        that: this,
        memory: memory,
      );

  Uint8List getMemoryData({required Memory memory, dynamic hint}) =>
      bridge.getMemoryDataMethodWasmRunModuleId(
        that: this,
        memory: memory,
      );

  int getMemoryDataPointer({required Memory memory, dynamic hint}) =>
      bridge.getMemoryDataPointerMethodWasmRunModuleId(
        that: this,
        memory: memory,
      );

  PointerAndLength getMemoryDataPointerAndLength(
          {required Memory memory, dynamic hint}) =>
      bridge.getMemoryDataPointerAndLengthMethodWasmRunModuleId(
        that: this,
        memory: memory,
      );

  Uint8List readMemory(
          {required Memory memory,
          required int offset,
          required int bytes,
          dynamic hint}) =>
      bridge.readMemoryMethodWasmRunModuleId(
        that: this,
        memory: memory,
        offset: offset,
        bytes: bytes,
      );

  int getMemoryPages({required Memory memory, dynamic hint}) =>
      bridge.getMemoryPagesMethodWasmRunModuleId(
        that: this,
        memory: memory,
      );

  void writeMemory(
          {required Memory memory,
          required int offset,
          required Uint8List buffer,
          dynamic hint}) =>
      bridge.writeMemoryMethodWasmRunModuleId(
        that: this,
        memory: memory,
        offset: offset,
        buffer: buffer,
      );

  int growMemory({required Memory memory, required int pages, dynamic hint}) =>
      bridge.growMemoryMethodWasmRunModuleId(
        that: this,
        memory: memory,
        pages: pages,
      );

  int getTableSize({required Table table, dynamic hint}) =>
      bridge.getTableSizeMethodWasmRunModuleId(
        that: this,
        table: table,
      );

  TableTy getTableType({required Table table, dynamic hint}) =>
      bridge.getTableTypeMethodWasmRunModuleId(
        that: this,
        table: table,
      );

  int growTable(
          {required Table table,
          required int delta,
          required WasmVal value,
          dynamic hint}) =>
      bridge.growTableMethodWasmRunModuleId(
        that: this,
        table: table,
        delta: delta,
        value: value,
      );

  WasmVal? getTable({required Table table, required int index, dynamic hint}) =>
      bridge.getTableMethodWasmRunModuleId(
        that: this,
        table: table,
        index: index,
      );

  void setTable(
          {required Table table,
          required int index,
          required WasmVal value,
          dynamic hint}) =>
      bridge.setTableMethodWasmRunModuleId(
        that: this,
        table: table,
        index: index,
        value: value,
      );

  void fillTable(
          {required Table table,
          required int index,
          required WasmVal value,
          required int len,
          dynamic hint}) =>
      bridge.fillTableMethodWasmRunModuleId(
        that: this,
        table: table,
        index: index,
        value: value,
        len: len,
      );

  void addFuel({required int delta, dynamic hint}) =>
      bridge.addFuelMethodWasmRunModuleId(
        that: this,
        delta: delta,
      );

  int? fuelConsumed({dynamic hint}) => bridge.fuelConsumedMethodWasmRunModuleId(
        that: this,
      );

  int consumeFuel({required int delta, dynamic hint}) =>
      bridge.consumeFuelMethodWasmRunModuleId(
        that: this,
        delta: delta,
      );
}

class WasmRunSharedMemory {
  final WasmRunDart bridge;
  final ArcRwLockSharedMemory field0;

  const WasmRunSharedMemory({
    required this.bridge,
    required this.field0,
  });

  MemoryTy ty({dynamic hint}) => bridge.tyMethodWasmRunSharedMemory(
        that: this,
      );

  int size({dynamic hint}) => bridge.sizeMethodWasmRunSharedMemory(
        that: this,
      );

  int dataSize({dynamic hint}) => bridge.dataSizeMethodWasmRunSharedMemory(
        that: this,
      );

  int dataPointer({dynamic hint}) =>
      bridge.dataPointerMethodWasmRunSharedMemory(
        that: this,
      );

  int grow({required int delta, dynamic hint}) =>
      bridge.growMethodWasmRunSharedMemory(
        that: this,
        delta: delta,
      );

  Future<Atomics> atomics({dynamic hint}) =>
      bridge.atomicsMethodWasmRunSharedMemory(
        that: this,
      );

  int atomicNotify({required int addr, required int count, dynamic hint}) =>
      bridge.atomicNotifyMethodWasmRunSharedMemory(
        that: this,
        addr: addr,
        count: count,
      );

  /// Equivalent of the WebAssembly `memory.atomic.wait32` instruction for
  /// this shared memory.
  ///
  /// This method allows embedders to block the current thread until notified
  /// via the `memory.atomic.notify` instruction or the
  /// [`SharedMemory::atomic_notify`] method, enabling synchronization with
  /// the wasm guest as desired.
  ///
  /// The `expected` argument is the expected 32-bit value to be stored at
  /// the byte address `addr` specified. The `addr` specified is an index
  /// into this linear memory.
  ///
  /// The optional `timeout` argument is the point in time after which the
  /// calling thread is guaranteed to be woken up. Blocking will not occur
  /// past this point.
  ///
  /// This function returns one of three possible values:
  ///
  /// * `WaitResult::Ok` - this function, loaded the value at `addr`, found
  ///   it was equal to `expected`, and then blocked (all as one atomic
  ///   operation). The thread was then awoken with a `memory.atomic.notify`
  ///   instruction or the [`SharedMemory::atomic_notify`] method.
  /// * `WaitResult::Mismatch` - the value at `addr` was loaded but was not
  ///   equal to `expected` so the thread did not block and immediately
  ///   returned.
  /// * `WaitResult::TimedOut` - all the steps of `Ok` happened, except this
  ///   thread was woken up due to a timeout.
  ///
  /// This function will not return due to spurious wakeups.
  ///
  /// # Errors
  ///
  /// This function will return an error if `addr` is not within bounds or
  /// not aligned to a 4-byte boundary.
  SharedMemoryWaitResult atomicWait32(
          {required int addr, required int expected, dynamic hint}) =>
      bridge.atomicWait32MethodWasmRunSharedMemory(
        that: this,
        addr: addr,
        expected: expected,
      );

  /// Equivalent of the WebAssembly `memory.atomic.wait64` instruction for
  /// this shared memory.
  ///
  /// For more information see [`SharedMemory::atomic_wait32`].
  ///
  /// # Errors
  ///
  /// Returns the same error as [`SharedMemory::atomic_wait32`] except that
  /// the specified address must be 8-byte aligned instead of 4-byte aligned.
  SharedMemoryWaitResult atomicWait64(
          {required int addr, required int expected, dynamic hint}) =>
      bridge.atomicWait64MethodWasmRunSharedMemory(
        that: this,
        addr: addr,
        expected: expected,
      );
}

class WasmRuntimeFeatures {
  /// The name of the runtime.
  /// For example, "wasmi" or "wasmtime".
  final String name;

  /// The version of the runtime.
  /// For example, "0.30.0" or "9.0.2".
  final String version;

  /// Is `true` if the runtime is the one provided by the browser.
  final bool isBrowser;

  /// The features supported by the runtime.
  final WasmFeatures supportedFeatures;

  /// The default features of the runtime.
  /// If a feature is supported, but it is not enable by default,
  /// then it must be enabled manually, perhaps with [ModuleConfig],
  /// and it may be experimental.
  final WasmFeatures defaultFeatures;

  const WasmRuntimeFeatures({
    required this.name,
    required this.version,
    required this.isBrowser,
    required this.supportedFeatures,
    required this.defaultFeatures,
  });
}

@freezed
class WasmVal with _$WasmVal {
  /// Value of 32-bit signed or unsigned integer.
  const factory WasmVal.i32(
    int field0,
  ) = WasmVal_i32;

  /// Value of 64-bit signed or unsigned integer.
  const factory WasmVal.i64(
    int field0,
  ) = WasmVal_i64;

  /// Value of 32-bit IEEE 754-2008 floating point number.
  const factory WasmVal.f32(
    double field0,
  ) = WasmVal_f32;

  /// Value of 64-bit IEEE 754-2008 floating point number.
  const factory WasmVal.f64(
    double field0,
  ) = WasmVal_f64;

  /// A 128 bit number.
  const factory WasmVal.v128(
    U8Array16 field0,
  ) = WasmVal_v128;

  /// A nullable function.
  const factory WasmVal.funcRef([
    WFunc? field0,
  ]) = WasmVal_funcRef;

  /// A nullable external object reference.
  const factory WasmVal.externRef([
    int? field0,
  ]) = WasmVal_externRef;
}

/// https://docs.wasmtime.dev/stability-wasi-proposals-support.html
class WasmWasiFeatures {
  /// Access to standard input, output, and error streams
  final bool io;

  /// Access to the filesystem
  final bool filesystem;

  /// Access to clocks and the system time
  final bool clocks;

  /// Access to random number generators
  final bool random;
  final bool poll;

  /// wasi-nn
  final bool machineLearning;

  /// wasi-crypto
  final bool crypto;

  /// WASM threads with ability to spawn
  /// https://github.com/WebAssembly/wasi-threads
  final bool threads;

  const WasmWasiFeatures({
    required this.io,
    required this.filesystem,
    required this.clocks,
    required this.random,
    required this.poll,
    required this.machineLearning,
    required this.crypto,
    required this.threads,
  });
}

class WasmRunDartImpl implements WasmRunDart {
  final WasmRunDartPlatform _platform;
  factory WasmRunDartImpl(ExternalLibrary dylib) =>
      WasmRunDartImpl.raw(WasmRunDartPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory WasmRunDartImpl.wasm(FutureOr<WasmModule> module) =>
      WasmRunDartImpl(module as ExternalLibrary);
  WasmRunDartImpl.raw(this._platform);
  WasmRunModuleId moduleBuilder(
      {required CompiledModule module,
      int? numThreads,
      WasiConfigNative? wasiConfig,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_compiled_module(module);
    var arg1 = _platform.api2wire_opt_box_autoadd_usize(numThreads);
    var arg2 =
        _platform.api2wire_opt_box_autoadd_wasi_config_native(wasiConfig);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_module_builder(arg0, arg1, arg2),
      parseSuccessData: _wire2api_wasm_run_module_id,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kModuleBuilderConstMeta,
      argValues: [module, numThreads, wasiConfig],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kModuleBuilderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "module_builder",
        argNames: ["module", "numThreads", "wasiConfig"],
      );

  Future<Uint8List> parseWatFormat({required String wat, dynamic hint}) {
    var arg0 = _platform.api2wire_String(wat);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_parse_wat_format(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kParseWatFormatConstMeta,
      argValues: [wat],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kParseWatFormatConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "parse_wat_format",
        argNames: ["wat"],
      );

  Future<CompiledModule> compileWasm(
      {required Uint8List moduleWasm,
      required ModuleConfig config,
      dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(moduleWasm);
    var arg1 = _platform.api2wire_box_autoadd_module_config(config);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_compile_wasm(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_compiled_module(d),
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCompileWasmConstMeta,
      argValues: [moduleWasm, config],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCompileWasmConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "compile_wasm",
        argNames: ["moduleWasm", "config"],
      );

  CompiledModule compileWasmSync(
      {required Uint8List moduleWasm,
      required ModuleConfig config,
      dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(moduleWasm);
    var arg1 = _platform.api2wire_box_autoadd_module_config(config);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_compile_wasm_sync(arg0, arg1),
      parseSuccessData: _wire2api_compiled_module,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCompileWasmSyncConstMeta,
      argValues: [moduleWasm, config],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCompileWasmSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "compile_wasm_sync",
        argNames: ["moduleWasm", "config"],
      );

  WasmFeatures wasmFeaturesForConfig(
      {required ModuleConfig config, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_module_config(config);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_wasm_features_for_config(arg0),
      parseSuccessData: _wire2api_wasm_features,
      parseErrorData: null,
      constMeta: kWasmFeaturesForConfigConstMeta,
      argValues: [config],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWasmFeaturesForConfigConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "wasm_features_for_config",
        argNames: ["config"],
      );

  WasmRuntimeFeatures wasmRuntimeFeatures({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_wasm_runtime_features(),
      parseSuccessData: _wire2api_wasm_runtime_features,
      parseErrorData: null,
      constMeta: kWasmRuntimeFeaturesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWasmRuntimeFeaturesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "wasm_runtime_features",
        argNames: [],
      );

  List<ModuleExportValue> exportsMethodWasmRunInstanceId(
      {required WasmRunInstanceId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_instance_id(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_exports__method__WasmRunInstanceId(arg0),
      parseSuccessData: _wire2api_list_module_export_value,
      parseErrorData: null,
      constMeta: kExportsMethodWasmRunInstanceIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExportsMethodWasmRunInstanceIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "exports__method__WasmRunInstanceId",
        argNames: ["that"],
      );

  WasmRunInstanceId instantiateSyncMethodWasmRunModuleId(
      {required WasmRunModuleId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_instantiate_sync__method__WasmRunModuleId(arg0),
      parseSuccessData: _wire2api_wasm_run_instance_id,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kInstantiateSyncMethodWasmRunModuleIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kInstantiateSyncMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "instantiate_sync__method__WasmRunModuleId",
            argNames: ["that"],
          );

  Future<WasmRunInstanceId> instantiateMethodWasmRunModuleId(
      {required WasmRunModuleId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_instantiate__method__WasmRunModuleId(port_, arg0),
      parseSuccessData: (d) => _wire2api_wasm_run_instance_id(d),
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kInstantiateMethodWasmRunModuleIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kInstantiateMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "instantiate__method__WasmRunModuleId",
            argNames: ["that"],
          );

  void linkImportsMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required List<ModuleImport> imports,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_list_module_import(imports);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_link_imports__method__WasmRunModuleId(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kLinkImportsMethodWasmRunModuleIdConstMeta,
      argValues: [that, imports],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kLinkImportsMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "link_imports__method__WasmRunModuleId",
            argNames: ["that", "imports"],
          );

  Stream<Uint8List> stdioStreamMethodWasmRunModuleId(
      {required WasmRunModuleId that, required StdIOKind kind, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = api2wire_std_io_kind(kind);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_stdio_stream__method__WasmRunModuleId(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: null,
      constMeta: kStdioStreamMethodWasmRunModuleIdConstMeta,
      argValues: [that, kind],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kStdioStreamMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "stdio_stream__method__WasmRunModuleId",
            argNames: ["that", "kind"],
          );

  Future<void> disposeMethodWasmRunModuleId(
      {required WasmRunModuleId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dispose__method__WasmRunModuleId(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDisposeMethodWasmRunModuleIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisposeMethodWasmRunModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dispose__method__WasmRunModuleId",
        argNames: ["that"],
      );

  List<WasmVal> callFunctionHandleSyncMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required WFunc func,
      required List<WasmVal> args,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_WFunc(func);
    var arg2 = _platform.api2wire_list_wasm_val(args);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_call_function_handle_sync__method__WasmRunModuleId(
              arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_wasm_val,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCallFunctionHandleSyncMethodWasmRunModuleIdConstMeta,
      argValues: [that, func, args],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionHandleSyncMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_function_handle_sync__method__WasmRunModuleId",
            argNames: ["that", "func", "args"],
          );

  Future<List<WasmVal>> callFunctionHandleMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required WFunc func,
      required List<WasmVal> args,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_WFunc(func);
    var arg2 = _platform.api2wire_list_wasm_val(args);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_call_function_handle__method__WasmRunModuleId(
              port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_wasm_val,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCallFunctionHandleMethodWasmRunModuleIdConstMeta,
      argValues: [that, func, args],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionHandleMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_function_handle__method__WasmRunModuleId",
            argNames: ["that", "func", "args"],
          );

  Stream<ParallelExec> callFunctionHandleParallelMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required String funcName,
      required List<WasmVal> args,
      required int numTasks,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_String(funcName);
    var arg2 = _platform.api2wire_list_wasm_val(args);
    var arg3 = api2wire_usize(numTasks);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_call_function_handle_parallel__method__WasmRunModuleId(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_parallel_exec,
      parseErrorData: null,
      constMeta: kCallFunctionHandleParallelMethodWasmRunModuleIdConstMeta,
      argValues: [that, funcName, args, numTasks],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCallFunctionHandleParallelMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "call_function_handle_parallel__method__WasmRunModuleId",
            argNames: ["that", "funcName", "args", "numTasks"],
          );

  void workerExecutionMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required int workerIndex,
      required List<WasmVal> results,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = api2wire_usize(workerIndex);
    var arg2 = _platform.api2wire_list_wasm_val(results);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_worker_execution__method__WasmRunModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kWorkerExecutionMethodWasmRunModuleIdConstMeta,
      argValues: [that, workerIndex, results],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kWorkerExecutionMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "worker_execution__method__WasmRunModuleId",
            argNames: ["that", "workerIndex", "results"],
          );

  FuncTy getFunctionTypeMethodWasmRunModuleId(
      {required WasmRunModuleId that, required WFunc func, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_WFunc(func);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_function_type__method__WasmRunModuleId(arg0, arg1),
      parseSuccessData: _wire2api_func_ty,
      parseErrorData: null,
      constMeta: kGetFunctionTypeMethodWasmRunModuleIdConstMeta,
      argValues: [that, func],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetFunctionTypeMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_function_type__method__WasmRunModuleId",
            argNames: ["that", "func"],
          );

  WFunc createFunctionMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required int functionPointer,
      required int functionId,
      required List<ValueTy> paramTypes,
      required List<ValueTy> resultTypes,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = api2wire_usize(functionPointer);
    var arg2 = api2wire_u32(functionId);
    var arg3 = _platform.api2wire_list_value_ty(paramTypes);
    var arg4 = _platform.api2wire_list_value_ty(resultTypes);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_create_function__method__WasmRunModuleId(
              arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_WFunc,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCreateFunctionMethodWasmRunModuleIdConstMeta,
      argValues: [that, functionPointer, functionId, paramTypes, resultTypes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCreateFunctionMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "create_function__method__WasmRunModuleId",
            argNames: [
              "that",
              "functionPointer",
              "functionId",
              "paramTypes",
              "resultTypes"
            ],
          );

  Memory createMemoryMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required MemoryTy memoryType,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_box_autoadd_memory_ty(memoryType);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_create_memory__method__WasmRunModuleId(arg0, arg1),
      parseSuccessData: _wire2api_Memory,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCreateMemoryMethodWasmRunModuleIdConstMeta,
      argValues: [that, memoryType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCreateMemoryMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "create_memory__method__WasmRunModuleId",
            argNames: ["that", "memoryType"],
          );

  Global createGlobalMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required WasmVal value,
      required bool mutable,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_box_autoadd_wasm_val(value);
    var arg2 = mutable;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_create_global__method__WasmRunModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_Global,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCreateGlobalMethodWasmRunModuleIdConstMeta,
      argValues: [that, value, mutable],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCreateGlobalMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "create_global__method__WasmRunModuleId",
            argNames: ["that", "value", "mutable"],
          );

  Table createTableMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required WasmVal value,
      required TableArgs tableType,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_box_autoadd_wasm_val(value);
    var arg2 = _platform.api2wire_box_autoadd_table_args(tableType);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_create_table__method__WasmRunModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_Table,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCreateTableMethodWasmRunModuleIdConstMeta,
      argValues: [that, value, tableType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCreateTableMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "create_table__method__WasmRunModuleId",
            argNames: ["that", "value", "tableType"],
          );

  GlobalTy getGlobalTypeMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Global global, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Global(global);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_global_type__method__WasmRunModuleId(arg0, arg1),
      parseSuccessData: _wire2api_global_ty,
      parseErrorData: null,
      constMeta: kGetGlobalTypeMethodWasmRunModuleIdConstMeta,
      argValues: [that, global],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetGlobalTypeMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_global_type__method__WasmRunModuleId",
            argNames: ["that", "global"],
          );

  WasmVal getGlobalValueMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Global global, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Global(global);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_global_value__method__WasmRunModuleId(arg0, arg1),
      parseSuccessData: _wire2api_wasm_val,
      parseErrorData: null,
      constMeta: kGetGlobalValueMethodWasmRunModuleIdConstMeta,
      argValues: [that, global],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetGlobalValueMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_global_value__method__WasmRunModuleId",
            argNames: ["that", "global"],
          );

  void setGlobalValueMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Global global,
      required WasmVal value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Global(global);
    var arg2 = _platform.api2wire_box_autoadd_wasm_val(value);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_set_global_value__method__WasmRunModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSetGlobalValueMethodWasmRunModuleIdConstMeta,
      argValues: [that, global, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSetGlobalValueMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "set_global_value__method__WasmRunModuleId",
            argNames: ["that", "global", "value"],
          );

  MemoryTy getMemoryTypeMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Memory memory, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_memory_type__method__WasmRunModuleId(arg0, arg1),
      parseSuccessData: _wire2api_memory_ty,
      parseErrorData: null,
      constMeta: kGetMemoryTypeMethodWasmRunModuleIdConstMeta,
      argValues: [that, memory],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryTypeMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_memory_type__method__WasmRunModuleId",
            argNames: ["that", "memory"],
          );

  Uint8List getMemoryDataMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Memory memory, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_memory_data__method__WasmRunModuleId(arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: null,
      constMeta: kGetMemoryDataMethodWasmRunModuleIdConstMeta,
      argValues: [that, memory],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryDataMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_memory_data__method__WasmRunModuleId",
            argNames: ["that", "memory"],
          );

  int getMemoryDataPointerMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Memory memory, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_memory_data_pointer__method__WasmRunModuleId(arg0, arg1),
      parseSuccessData: _wire2api_usize,
      parseErrorData: null,
      constMeta: kGetMemoryDataPointerMethodWasmRunModuleIdConstMeta,
      argValues: [that, memory],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryDataPointerMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_memory_data_pointer__method__WasmRunModuleId",
            argNames: ["that", "memory"],
          );

  PointerAndLength getMemoryDataPointerAndLengthMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Memory memory, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_memory_data_pointer_and_length__method__WasmRunModuleId(
              arg0, arg1),
      parseSuccessData: _wire2api_pointer_and_length,
      parseErrorData: null,
      constMeta: kGetMemoryDataPointerAndLengthMethodWasmRunModuleIdConstMeta,
      argValues: [that, memory],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryDataPointerAndLengthMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "get_memory_data_pointer_and_length__method__WasmRunModuleId",
            argNames: ["that", "memory"],
          );

  Uint8List readMemoryMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Memory memory,
      required int offset,
      required int bytes,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    var arg2 = api2wire_usize(offset);
    var arg3 = api2wire_usize(bytes);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_read_memory__method__WasmRunModuleId(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kReadMemoryMethodWasmRunModuleIdConstMeta,
      argValues: [that, memory, offset, bytes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kReadMemoryMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "read_memory__method__WasmRunModuleId",
            argNames: ["that", "memory", "offset", "bytes"],
          );

  int getMemoryPagesMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Memory memory, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_memory_pages__method__WasmRunModuleId(arg0, arg1),
      parseSuccessData: _wire2api_u32,
      parseErrorData: null,
      constMeta: kGetMemoryPagesMethodWasmRunModuleIdConstMeta,
      argValues: [that, memory],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetMemoryPagesMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_memory_pages__method__WasmRunModuleId",
            argNames: ["that", "memory"],
          );

  void writeMemoryMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Memory memory,
      required int offset,
      required Uint8List buffer,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    var arg2 = api2wire_usize(offset);
    var arg3 = _platform.api2wire_uint_8_list(buffer);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_write_memory__method__WasmRunModuleId(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kWriteMemoryMethodWasmRunModuleIdConstMeta,
      argValues: [that, memory, offset, buffer],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kWriteMemoryMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "write_memory__method__WasmRunModuleId",
            argNames: ["that", "memory", "offset", "buffer"],
          );

  int growMemoryMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Memory memory,
      required int pages,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Memory(memory);
    var arg2 = api2wire_u32(pages);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_grow_memory__method__WasmRunModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGrowMemoryMethodWasmRunModuleIdConstMeta,
      argValues: [that, memory, pages],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGrowMemoryMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "grow_memory__method__WasmRunModuleId",
            argNames: ["that", "memory", "pages"],
          );

  int getTableSizeMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Table table, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_table_size__method__WasmRunModuleId(arg0, arg1),
      parseSuccessData: _wire2api_u32,
      parseErrorData: null,
      constMeta: kGetTableSizeMethodWasmRunModuleIdConstMeta,
      argValues: [that, table],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTableSizeMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_table_size__method__WasmRunModuleId",
            argNames: ["that", "table"],
          );

  TableTy getTableTypeMethodWasmRunModuleId(
      {required WasmRunModuleId that, required Table table, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_table_type__method__WasmRunModuleId(arg0, arg1),
      parseSuccessData: _wire2api_table_ty,
      parseErrorData: null,
      constMeta: kGetTableTypeMethodWasmRunModuleIdConstMeta,
      argValues: [that, table],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTableTypeMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_table_type__method__WasmRunModuleId",
            argNames: ["that", "table"],
          );

  int growTableMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Table table,
      required int delta,
      required WasmVal value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    var arg2 = api2wire_u32(delta);
    var arg3 = _platform.api2wire_box_autoadd_wasm_val(value);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_grow_table__method__WasmRunModuleId(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGrowTableMethodWasmRunModuleIdConstMeta,
      argValues: [that, table, delta, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGrowTableMethodWasmRunModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "grow_table__method__WasmRunModuleId",
        argNames: ["that", "table", "delta", "value"],
      );

  WasmVal? getTableMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Table table,
      required int index,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    var arg2 = api2wire_u32(index);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_get_table__method__WasmRunModuleId(arg0, arg1, arg2),
      parseSuccessData: _wire2api_opt_box_autoadd_wasm_val,
      parseErrorData: null,
      constMeta: kGetTableMethodWasmRunModuleIdConstMeta,
      argValues: [that, table, index],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetTableMethodWasmRunModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_table__method__WasmRunModuleId",
        argNames: ["that", "table", "index"],
      );

  void setTableMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Table table,
      required int index,
      required WasmVal value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    var arg2 = api2wire_u32(index);
    var arg3 = _platform.api2wire_box_autoadd_wasm_val(value);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_set_table__method__WasmRunModuleId(arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSetTableMethodWasmRunModuleIdConstMeta,
      argValues: [that, table, index, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetTableMethodWasmRunModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_table__method__WasmRunModuleId",
        argNames: ["that", "table", "index", "value"],
      );

  void fillTableMethodWasmRunModuleId(
      {required WasmRunModuleId that,
      required Table table,
      required int index,
      required WasmVal value,
      required int len,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_Table(table);
    var arg2 = api2wire_u32(index);
    var arg3 = _platform.api2wire_box_autoadd_wasm_val(value);
    var arg4 = api2wire_u32(len);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_fill_table__method__WasmRunModuleId(
          arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kFillTableMethodWasmRunModuleIdConstMeta,
      argValues: [that, table, index, value, len],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFillTableMethodWasmRunModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "fill_table__method__WasmRunModuleId",
        argNames: ["that", "table", "index", "value", "len"],
      );

  void addFuelMethodWasmRunModuleId(
      {required WasmRunModuleId that, required int delta, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_u64(delta);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_add_fuel__method__WasmRunModuleId(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kAddFuelMethodWasmRunModuleIdConstMeta,
      argValues: [that, delta],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddFuelMethodWasmRunModuleIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_fuel__method__WasmRunModuleId",
        argNames: ["that", "delta"],
      );

  int? fuelConsumedMethodWasmRunModuleId(
      {required WasmRunModuleId that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_fuel_consumed__method__WasmRunModuleId(arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_u64,
      parseErrorData: null,
      constMeta: kFuelConsumedMethodWasmRunModuleIdConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kFuelConsumedMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "fuel_consumed__method__WasmRunModuleId",
            argNames: ["that"],
          );

  int consumeFuelMethodWasmRunModuleId(
      {required WasmRunModuleId that, required int delta, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_module_id(that);
    var arg1 = _platform.api2wire_u64(delta);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_consume_fuel__method__WasmRunModuleId(arg0, arg1),
      parseSuccessData: _wire2api_u64,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kConsumeFuelMethodWasmRunModuleIdConstMeta,
      argValues: [that, delta],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kConsumeFuelMethodWasmRunModuleIdConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "consume_fuel__method__WasmRunModuleId",
            argNames: ["that", "delta"],
          );

  WasmRunSharedMemory createSharedMemoryMethodCompiledModule(
      {required CompiledModule that,
      required MemoryTy memoryType,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_compiled_module(that);
    var arg1 = _platform.api2wire_box_autoadd_memory_ty(memoryType);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_create_shared_memory__method__CompiledModule(arg0, arg1),
      parseSuccessData: _wire2api_wasm_run_shared_memory,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCreateSharedMemoryMethodCompiledModuleConstMeta,
      argValues: [that, memoryType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCreateSharedMemoryMethodCompiledModuleConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "create_shared_memory__method__CompiledModule",
            argNames: ["that", "memoryType"],
          );

  List<ModuleImportDesc> getModuleImportsMethodCompiledModule(
      {required CompiledModule that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_compiled_module(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_get_module_imports__method__CompiledModule(arg0),
      parseSuccessData: _wire2api_list_module_import_desc,
      parseErrorData: null,
      constMeta: kGetModuleImportsMethodCompiledModuleConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetModuleImportsMethodCompiledModuleConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_module_imports__method__CompiledModule",
            argNames: ["that"],
          );

  List<ModuleExportDesc> getModuleExportsMethodCompiledModule(
      {required CompiledModule that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_compiled_module(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_get_module_exports__method__CompiledModule(arg0),
      parseSuccessData: _wire2api_list_module_export_desc,
      parseErrorData: null,
      constMeta: kGetModuleExportsMethodCompiledModuleConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetModuleExportsMethodCompiledModuleConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_module_exports__method__CompiledModule",
            argNames: ["that"],
          );

  MemoryTy tyMethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_shared_memory(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_ty__method__WasmRunSharedMemory(arg0),
      parseSuccessData: _wire2api_memory_ty,
      parseErrorData: null,
      constMeta: kTyMethodWasmRunSharedMemoryConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTyMethodWasmRunSharedMemoryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ty__method__WasmRunSharedMemory",
        argNames: ["that"],
      );

  int sizeMethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_shared_memory(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_size__method__WasmRunSharedMemory(arg0),
      parseSuccessData: _wire2api_u64,
      parseErrorData: null,
      constMeta: kSizeMethodWasmRunSharedMemoryConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSizeMethodWasmRunSharedMemoryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "size__method__WasmRunSharedMemory",
        argNames: ["that"],
      );

  int dataSizeMethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_shared_memory(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_data_size__method__WasmRunSharedMemory(arg0),
      parseSuccessData: _wire2api_usize,
      parseErrorData: null,
      constMeta: kDataSizeMethodWasmRunSharedMemoryConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDataSizeMethodWasmRunSharedMemoryConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "data_size__method__WasmRunSharedMemory",
            argNames: ["that"],
          );

  int dataPointerMethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_shared_memory(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_data_pointer__method__WasmRunSharedMemory(arg0),
      parseSuccessData: _wire2api_usize,
      parseErrorData: null,
      constMeta: kDataPointerMethodWasmRunSharedMemoryConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDataPointerMethodWasmRunSharedMemoryConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "data_pointer__method__WasmRunSharedMemory",
            argNames: ["that"],
          );

  int growMethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that, required int delta, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_shared_memory(that);
    var arg1 = _platform.api2wire_u64(delta);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_grow__method__WasmRunSharedMemory(arg0, arg1),
      parseSuccessData: _wire2api_u64,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGrowMethodWasmRunSharedMemoryConstMeta,
      argValues: [that, delta],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGrowMethodWasmRunSharedMemoryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "grow__method__WasmRunSharedMemory",
        argNames: ["that", "delta"],
      );

  Future<Atomics> atomicsMethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_shared_memory(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_atomics__method__WasmRunSharedMemory(port_, arg0),
      parseSuccessData: (d) => _wire2api_atomics(d),
      parseErrorData: null,
      constMeta: kAtomicsMethodWasmRunSharedMemoryConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAtomicsMethodWasmRunSharedMemoryConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "atomics__method__WasmRunSharedMemory",
            argNames: ["that"],
          );

  int atomicNotifyMethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that,
      required int addr,
      required int count,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_shared_memory(that);
    var arg1 = _platform.api2wire_u64(addr);
    var arg2 = api2wire_u32(count);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_atomic_notify__method__WasmRunSharedMemory(arg0, arg1, arg2),
      parseSuccessData: _wire2api_u32,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kAtomicNotifyMethodWasmRunSharedMemoryConstMeta,
      argValues: [that, addr, count],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAtomicNotifyMethodWasmRunSharedMemoryConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "atomic_notify__method__WasmRunSharedMemory",
            argNames: ["that", "addr", "count"],
          );

  SharedMemoryWaitResult atomicWait32MethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that,
      required int addr,
      required int expected,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_shared_memory(that);
    var arg1 = _platform.api2wire_u64(addr);
    var arg2 = api2wire_u32(expected);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_atomic_wait32__method__WasmRunSharedMemory(arg0, arg1, arg2),
      parseSuccessData: _wire2api_shared_memory_wait_result,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kAtomicWait32MethodWasmRunSharedMemoryConstMeta,
      argValues: [that, addr, expected],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAtomicWait32MethodWasmRunSharedMemoryConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "atomic_wait32__method__WasmRunSharedMemory",
            argNames: ["that", "addr", "expected"],
          );

  SharedMemoryWaitResult atomicWait64MethodWasmRunSharedMemory(
      {required WasmRunSharedMemory that,
      required int addr,
      required int expected,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wasm_run_shared_memory(that);
    var arg1 = _platform.api2wire_u64(addr);
    var arg2 = _platform.api2wire_u64(expected);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_atomic_wait64__method__WasmRunSharedMemory(arg0, arg1, arg2),
      parseSuccessData: _wire2api_shared_memory_wait_result,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kAtomicWait64MethodWasmRunSharedMemoryConstMeta,
      argValues: [that, addr, expected],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kAtomicWait64MethodWasmRunSharedMemoryConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "atomic_wait64__method__WasmRunSharedMemory",
            argNames: ["that", "addr", "expected"],
          );

  Future<int> addMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int val,
      required AtomicOrdering order,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_atomics(that);
    var arg1 = api2wire_usize(offset);
    var arg2 = api2wire_atomic_kind(kind);
    var arg3 = _platform.api2wire_i64(val);
    var arg4 = api2wire_atomic_ordering(order);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_add__method__Atomics(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_i64,
      parseErrorData: null,
      constMeta: kAddMethodAtomicsConstMeta,
      argValues: [that, offset, kind, val, order],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddMethodAtomicsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add__method__Atomics",
        argNames: ["that", "offset", "kind", "val", "order"],
      );

  Future<int> loadMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required AtomicOrdering order,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_atomics(that);
    var arg1 = api2wire_usize(offset);
    var arg2 = api2wire_atomic_kind(kind);
    var arg3 = api2wire_atomic_ordering(order);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_load__method__Atomics(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_i64,
      parseErrorData: null,
      constMeta: kLoadMethodAtomicsConstMeta,
      argValues: [that, offset, kind, order],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoadMethodAtomicsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "load__method__Atomics",
        argNames: ["that", "offset", "kind", "order"],
      );

  Future<void> storeMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int val,
      required AtomicOrdering order,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_atomics(that);
    var arg1 = api2wire_usize(offset);
    var arg2 = api2wire_atomic_kind(kind);
    var arg3 = _platform.api2wire_i64(val);
    var arg4 = api2wire_atomic_ordering(order);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_store__method__Atomics(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kStoreMethodAtomicsConstMeta,
      argValues: [that, offset, kind, val, order],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStoreMethodAtomicsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "store__method__Atomics",
        argNames: ["that", "offset", "kind", "val", "order"],
      );

  Future<int> swapMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int val,
      required AtomicOrdering order,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_atomics(that);
    var arg1 = api2wire_usize(offset);
    var arg2 = api2wire_atomic_kind(kind);
    var arg3 = _platform.api2wire_i64(val);
    var arg4 = api2wire_atomic_ordering(order);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_swap__method__Atomics(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_i64,
      parseErrorData: null,
      constMeta: kSwapMethodAtomicsConstMeta,
      argValues: [that, offset, kind, val, order],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSwapMethodAtomicsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "swap__method__Atomics",
        argNames: ["that", "offset", "kind", "val", "order"],
      );

  Future<CompareExchangeResult> compareExchangeMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int current,
      required int newValue,
      required AtomicOrdering success,
      required AtomicOrdering failure,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_atomics(that);
    var arg1 = api2wire_usize(offset);
    var arg2 = api2wire_atomic_kind(kind);
    var arg3 = _platform.api2wire_i64(current);
    var arg4 = _platform.api2wire_i64(newValue);
    var arg5 = api2wire_atomic_ordering(success);
    var arg6 = api2wire_atomic_ordering(failure);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_compare_exchange__method__Atomics(
              port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_compare_exchange_result,
      parseErrorData: null,
      constMeta: kCompareExchangeMethodAtomicsConstMeta,
      argValues: [that, offset, kind, current, newValue, success, failure],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCompareExchangeMethodAtomicsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "compare_exchange__method__Atomics",
        argNames: [
          "that",
          "offset",
          "kind",
          "current",
          "newValue",
          "success",
          "failure"
        ],
      );

  Future<int> subMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int val,
      required AtomicOrdering order,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_atomics(that);
    var arg1 = api2wire_usize(offset);
    var arg2 = api2wire_atomic_kind(kind);
    var arg3 = _platform.api2wire_i64(val);
    var arg4 = api2wire_atomic_ordering(order);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_sub__method__Atomics(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_i64,
      parseErrorData: null,
      constMeta: kSubMethodAtomicsConstMeta,
      argValues: [that, offset, kind, val, order],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSubMethodAtomicsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sub__method__Atomics",
        argNames: ["that", "offset", "kind", "val", "order"],
      );

  Future<int> andMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int val,
      required AtomicOrdering order,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_atomics(that);
    var arg1 = api2wire_usize(offset);
    var arg2 = api2wire_atomic_kind(kind);
    var arg3 = _platform.api2wire_i64(val);
    var arg4 = api2wire_atomic_ordering(order);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_and__method__Atomics(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_i64,
      parseErrorData: null,
      constMeta: kAndMethodAtomicsConstMeta,
      argValues: [that, offset, kind, val, order],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAndMethodAtomicsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "and__method__Atomics",
        argNames: ["that", "offset", "kind", "val", "order"],
      );

  Future<int> orMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int val,
      required AtomicOrdering order,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_atomics(that);
    var arg1 = api2wire_usize(offset);
    var arg2 = api2wire_atomic_kind(kind);
    var arg3 = _platform.api2wire_i64(val);
    var arg4 = api2wire_atomic_ordering(order);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_or__method__Atomics(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_i64,
      parseErrorData: null,
      constMeta: kOrMethodAtomicsConstMeta,
      argValues: [that, offset, kind, val, order],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOrMethodAtomicsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "or__method__Atomics",
        argNames: ["that", "offset", "kind", "val", "order"],
      );

  Future<int> xorMethodAtomics(
      {required Atomics that,
      required int offset,
      required AtomicKind kind,
      required int val,
      required AtomicOrdering order,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_atomics(that);
    var arg1 = api2wire_usize(offset);
    var arg2 = api2wire_atomic_kind(kind);
    var arg3 = _platform.api2wire_i64(val);
    var arg4 = api2wire_atomic_ordering(order);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_xor__method__Atomics(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_i64,
      parseErrorData: null,
      constMeta: kXorMethodAtomicsConstMeta,
      argValues: [that, offset, kind, val, order],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kXorMethodAtomicsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "xor__method__Atomics",
        argNames: ["that", "offset", "kind", "val", "order"],
      );

  DropFnType get dropOpaqueArcRwLockSharedMemory =>
      _platform.inner.drop_opaque_ArcRwLockSharedMemory;
  ShareFnType get shareOpaqueArcRwLockSharedMemory =>
      _platform.inner.share_opaque_ArcRwLockSharedMemory;
  OpaqueTypeFinalizer get ArcRwLockSharedMemoryFinalizer =>
      _platform.ArcRwLockSharedMemoryFinalizer;

  DropFnType get dropOpaqueArcStdSyncMutexModule =>
      _platform.inner.drop_opaque_ArcStdSyncMutexModule;
  ShareFnType get shareOpaqueArcStdSyncMutexModule =>
      _platform.inner.share_opaque_ArcStdSyncMutexModule;
  OpaqueTypeFinalizer get ArcStdSyncMutexModuleFinalizer =>
      _platform.ArcStdSyncMutexModuleFinalizer;

  DropFnType get dropOpaqueCallStack => _platform.inner.drop_opaque_CallStack;
  ShareFnType get shareOpaqueCallStack =>
      _platform.inner.share_opaque_CallStack;
  OpaqueTypeFinalizer get CallStackFinalizer => _platform.CallStackFinalizer;

  DropFnType get dropOpaqueGlobal => _platform.inner.drop_opaque_Global;
  ShareFnType get shareOpaqueGlobal => _platform.inner.share_opaque_Global;
  OpaqueTypeFinalizer get GlobalFinalizer => _platform.GlobalFinalizer;

  DropFnType get dropOpaqueMemory => _platform.inner.drop_opaque_Memory;
  ShareFnType get shareOpaqueMemory => _platform.inner.share_opaque_Memory;
  OpaqueTypeFinalizer get MemoryFinalizer => _platform.MemoryFinalizer;

  DropFnType get dropOpaqueTable => _platform.inner.drop_opaque_Table;
  ShareFnType get shareOpaqueTable => _platform.inner.share_opaque_Table;
  OpaqueTypeFinalizer get TableFinalizer => _platform.TableFinalizer;

  DropFnType get dropOpaqueWFunc => _platform.inner.drop_opaque_WFunc;
  ShareFnType get shareOpaqueWFunc => _platform.inner.share_opaque_WFunc;
  OpaqueTypeFinalizer get WFuncFinalizer => _platform.WFuncFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  ArcRwLockSharedMemory _wire2api_ArcRwLockSharedMemory(dynamic raw) {
    return ArcRwLockSharedMemory.fromRaw(raw[0], raw[1], this);
  }

  ArcStdSyncMutexModule _wire2api_ArcStdSyncMutexModule(dynamic raw) {
    return ArcStdSyncMutexModule.fromRaw(raw[0], raw[1], this);
  }

  CallStack _wire2api_CallStack(dynamic raw) {
    return CallStack.fromRaw(raw[0], raw[1], this);
  }

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  Global _wire2api_Global(dynamic raw) {
    return Global.fromRaw(raw[0], raw[1], this);
  }

  Memory _wire2api_Memory(dynamic raw) {
    return Memory.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Table _wire2api_Table(dynamic raw) {
    return Table.fromRaw(raw[0], raw[1], this);
  }

  WFunc _wire2api_WFunc(dynamic raw) {
    return WFunc.fromRaw(raw[0], raw[1], this);
  }

  Atomics _wire2api_atomics(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Atomics(
      bridge: this,
      field0: _wire2api_usize(arr[0]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  WFunc _wire2api_box_autoadd_WFunc(dynamic raw) {
    return _wire2api_WFunc(raw);
  }

  FuncTy _wire2api_box_autoadd_func_ty(dynamic raw) {
    return _wire2api_func_ty(raw);
  }

  FunctionCall _wire2api_box_autoadd_function_call(dynamic raw) {
    return _wire2api_function_call(raw);
  }

  GlobalTy _wire2api_box_autoadd_global_ty(dynamic raw) {
    return _wire2api_global_ty(raw);
  }

  MemoryTy _wire2api_box_autoadd_memory_ty(dynamic raw) {
    return _wire2api_memory_ty(raw);
  }

  TableTy _wire2api_box_autoadd_table_ty(dynamic raw) {
    return _wire2api_table_ty(raw);
  }

  int _wire2api_box_autoadd_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_box_autoadd_u64(dynamic raw) {
    return _wire2api_u64(raw);
  }

  WasmRunSharedMemory _wire2api_box_autoadd_wasm_run_shared_memory(
      dynamic raw) {
    return _wire2api_wasm_run_shared_memory(raw);
  }

  WasmVal _wire2api_box_autoadd_wasm_val(dynamic raw) {
    return _wire2api_wasm_val(raw);
  }

  WasmWasiFeatures _wire2api_box_autoadd_wasm_wasi_features(dynamic raw) {
    return _wire2api_wasm_wasi_features(raw);
  }

  CompareExchangeResult _wire2api_compare_exchange_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CompareExchangeResult(
      success: _wire2api_bool(arr[0]),
      value: _wire2api_i64(arr[1]),
    );
  }

  CompiledModule _wire2api_compiled_module(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CompiledModule(
      bridge: this,
      field0: _wire2api_ArcStdSyncMutexModule(arr[0]),
    );
  }

  ExternalType _wire2api_external_type(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ExternalType_Func(
          _wire2api_box_autoadd_func_ty(raw[1]),
        );
      case 1:
        return ExternalType_Global(
          _wire2api_box_autoadd_global_ty(raw[1]),
        );
      case 2:
        return ExternalType_Table(
          _wire2api_box_autoadd_table_ty(raw[1]),
        );
      case 3:
        return ExternalType_Memory(
          _wire2api_box_autoadd_memory_ty(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  ExternalValue _wire2api_external_value(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ExternalValue_Func(
          _wire2api_WFunc(raw[1]),
        );
      case 1:
        return ExternalValue_Global(
          _wire2api_Global(raw[1]),
        );
      case 2:
        return ExternalValue_Table(
          _wire2api_Table(raw[1]),
        );
      case 3:
        return ExternalValue_Memory(
          _wire2api_Memory(raw[1]),
        );
      case 4:
        return ExternalValue_SharedMemory(
          _wire2api_box_autoadd_wasm_run_shared_memory(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  FuncTy _wire2api_func_ty(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FuncTy(
      parameters: _wire2api_list_value_ty(arr[0]),
      results: _wire2api_list_value_ty(arr[1]),
    );
  }

  FunctionCall _wire2api_function_call(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return FunctionCall(
      args: _wire2api_list_wasm_val(arr[0]),
      functionId: _wire2api_u32(arr[1]),
      functionPointer: _wire2api_usize(arr[2]),
      numResults: _wire2api_usize(arr[3]),
      workerIndex: _wire2api_usize(arr[4]),
    );
  }

  GlobalTy _wire2api_global_ty(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GlobalTy(
      value: _wire2api_value_ty(arr[0]),
      mutable: _wire2api_bool(arr[1]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<ModuleExportDesc> _wire2api_list_module_export_desc(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_module_export_desc).toList();
  }

  List<ModuleExportValue> _wire2api_list_module_export_value(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_module_export_value).toList();
  }

  List<ModuleImportDesc> _wire2api_list_module_import_desc(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_module_import_desc).toList();
  }

  List<ValueTy> _wire2api_list_value_ty(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_value_ty).toList();
  }

  List<WasmVal> _wire2api_list_wasm_val(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_wasm_val).toList();
  }

  MemoryTy _wire2api_memory_ty(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return MemoryTy(
      shared: _wire2api_bool(arr[0]),
      minimum: _wire2api_u32(arr[1]),
      maximum: _wire2api_opt_box_autoadd_u32(arr[2]),
    );
  }

  ModuleExportDesc _wire2api_module_export_desc(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ModuleExportDesc(
      name: _wire2api_String(arr[0]),
      ty: _wire2api_external_type(arr[1]),
    );
  }

  ModuleExportValue _wire2api_module_export_value(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ModuleExportValue(
      desc: _wire2api_module_export_desc(arr[0]),
      value: _wire2api_external_value(arr[1]),
    );
  }

  ModuleImportDesc _wire2api_module_import_desc(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ModuleImportDesc(
      module: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
      ty: _wire2api_external_type(arr[2]),
    );
  }

  WFunc? _wire2api_opt_box_autoadd_WFunc(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_WFunc(raw);
  }

  int? _wire2api_opt_box_autoadd_u32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u32(raw);
  }

  int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u64(raw);
  }

  WasmVal? _wire2api_opt_box_autoadd_wasm_val(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_wasm_val(raw);
  }

  WasmWasiFeatures? _wire2api_opt_box_autoadd_wasm_wasi_features(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_wasm_wasi_features(raw);
  }

  ParallelExec _wire2api_parallel_exec(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ParallelExec_Ok(
          _wire2api_list_wasm_val(raw[1]),
        );
      case 1:
        return ParallelExec_Err(
          _wire2api_String(raw[1]),
        );
      case 2:
        return ParallelExec_Call(
          _wire2api_box_autoadd_function_call(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  PointerAndLength _wire2api_pointer_and_length(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PointerAndLength(
      pointer: _wire2api_usize(arr[0]),
      length: _wire2api_usize(arr[1]),
    );
  }

  SharedMemoryWaitResult _wire2api_shared_memory_wait_result(dynamic raw) {
    return SharedMemoryWaitResult.values[raw as int];
  }

  TableTy _wire2api_table_ty(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TableTy(
      element: _wire2api_value_ty(arr[0]),
      minimum: _wire2api_u32(arr[1]),
      maximum: _wire2api_opt_box_autoadd_u32(arr[2]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array16 _wire2api_u8_array_16(dynamic raw) {
    return U8Array16(_wire2api_uint_8_list(raw));
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }

  ValueTy _wire2api_value_ty(dynamic raw) {
    return ValueTy.values[raw as int];
  }

  WasmFeatures _wire2api_wasm_features(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 20)
      throw Exception('unexpected arr length: expect 20 but see ${arr.length}');
    return WasmFeatures(
      mutableGlobal: _wire2api_bool(arr[0]),
      saturatingFloatToInt: _wire2api_bool(arr[1]),
      signExtension: _wire2api_bool(arr[2]),
      referenceTypes: _wire2api_bool(arr[3]),
      multiValue: _wire2api_bool(arr[4]),
      bulkMemory: _wire2api_bool(arr[5]),
      simd: _wire2api_bool(arr[6]),
      relaxedSimd: _wire2api_bool(arr[7]),
      threads: _wire2api_bool(arr[8]),
      tailCall: _wire2api_bool(arr[9]),
      floats: _wire2api_bool(arr[10]),
      multiMemory: _wire2api_bool(arr[11]),
      exceptions: _wire2api_bool(arr[12]),
      memory64: _wire2api_bool(arr[13]),
      extendedConst: _wire2api_bool(arr[14]),
      componentModel: _wire2api_bool(arr[15]),
      memoryControl: _wire2api_bool(arr[16]),
      garbageCollection: _wire2api_bool(arr[17]),
      typeReflection: _wire2api_bool(arr[18]),
      wasiFeatures: _wire2api_opt_box_autoadd_wasm_wasi_features(arr[19]),
    );
  }

  WasmRunInstanceId _wire2api_wasm_run_instance_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return WasmRunInstanceId(
      bridge: this,
      field0: _wire2api_u32(arr[0]),
    );
  }

  WasmRunModuleId _wire2api_wasm_run_module_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return WasmRunModuleId(
      bridge: this,
      field0: _wire2api_u32(arr[0]),
      field1: _wire2api_CallStack(arr[1]),
    );
  }

  WasmRunSharedMemory _wire2api_wasm_run_shared_memory(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return WasmRunSharedMemory(
      bridge: this,
      field0: _wire2api_ArcRwLockSharedMemory(arr[0]),
    );
  }

  WasmRuntimeFeatures _wire2api_wasm_runtime_features(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return WasmRuntimeFeatures(
      name: _wire2api_String(arr[0]),
      version: _wire2api_String(arr[1]),
      isBrowser: _wire2api_bool(arr[2]),
      supportedFeatures: _wire2api_wasm_features(arr[3]),
      defaultFeatures: _wire2api_wasm_features(arr[4]),
    );
  }

  WasmVal _wire2api_wasm_val(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return WasmVal_i32(
          _wire2api_i32(raw[1]),
        );
      case 1:
        return WasmVal_i64(
          _wire2api_i64(raw[1]),
        );
      case 2:
        return WasmVal_f32(
          _wire2api_f32(raw[1]),
        );
      case 3:
        return WasmVal_f64(
          _wire2api_f64(raw[1]),
        );
      case 4:
        return WasmVal_v128(
          _wire2api_u8_array_16(raw[1]),
        );
      case 5:
        return WasmVal_funcRef(
          _wire2api_opt_box_autoadd_WFunc(raw[1]),
        );
      case 6:
        return WasmVal_externRef(
          _wire2api_opt_box_autoadd_u32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  WasmWasiFeatures _wire2api_wasm_wasi_features(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return WasmWasiFeatures(
      io: _wire2api_bool(arr[0]),
      filesystem: _wire2api_bool(arr[1]),
      clocks: _wire2api_bool(arr[2]),
      random: _wire2api_bool(arr[3]),
      poll: _wire2api_bool(arr[4]),
      machineLearning: _wire2api_bool(arr[5]),
      crypto: _wire2api_bool(arr[6]),
      threads: _wire2api_bool(arr[7]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_atomic_kind(AtomicKind raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_atomic_ordering(AtomicOrdering raw) {
  return api2wire_i32(raw.index);
}

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_std_io_kind(StdIOKind raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}

@protected
int api2wire_value_ty(ValueTy raw) {
  return api2wire_i32(raw.index);
}

// Section: finalizer

extension WasmRunDartImplPlatform on WasmRunDartImpl {
  WasmRunDartPlatform get platform => _platform;
}
